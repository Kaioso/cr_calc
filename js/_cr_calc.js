// (defn to-ranges [ranges]
//   (into {} (apply concat (for [[start end bonus cr] ranges] (for [n (range start (+ 1 end))] [n [cr bonus]])))))

function range(from, to) {
    return Array.apply(null, Array(to)).map(function (_, i) {return from+i;});
}

function to_ranges(ranges) {
    var lookup = {};
    for (var cr = 0; cr < ranges.length; cr++) {
        for (n in range(ranges[cr][0], ranges[cr][1] + 1)) {
            lookup[String(n)] = [cr + 1, ranges[cr][2]];
        }
    }
    return lookup;
}

function CRTables() {
    this.defense_cr_value_table = to_ranges(
        [[1, 6, 11],
         [7, 35, 13],
         [36, 49, 13],
         [50, 70, 13],
         [71, 85, 13],
         [86, 100, 13],
         [101, 115, 13],
         [116, 130, 14],
         [131, 145, 15],
         [146, 160, 15],
         [161, 175, 15],
         [176, 190, 16],
         [191, 205, 16],
         [206, 220, 17],
         [221, 235, 17],
         [236, 250, 17],
         [251, 265, 18],
         [266, 280, 18],
         [281, 295, 18],
         [296, 310, 18],
         [311, 325, 19],
         [326, 340, 19],
         [341, 355, 19],
         [356, 400, 19],
         [401, 445, 19],
         [446, 490, 19],
         [491, 535, 19],
         [536, 580, 19],
         [581, 625, 19],
         [626, 670, 19],
         [671, 715, 19],
         [716, 760, 19],
         [761, 805, 19],
         [806, 850, 19]]);

    this.offense_cr_value_table = to_ranges(
        [[0, 1, 1],
         [2, 3, 3],
         [4, 5, 3],
         [6, 8, 3],
         [9, 14, 3],
         [15, 20, 3],
         [21, 26, 4],
         [27, 32, 5],
         [33, 38, 6],
         [39, 44, 6],
         [45, 50, 6],
         [51, 56, 7],
         [57, 62, 7],
         [63, 68, 7],
         [69, 74, 8],
         [75, 80, 8],
         [81, 86, 8],
         [87, 92, 8],
         [93, 98, 8],
         [99, 104, 9],
         [105, 110, 10],
         [111, 116, 10],
         [117, 122, 10],
         [123, 140, 10],
         [141, 158, 11],
         [159, 176, 11],
         [177, 194, 11],
         [195, 212, 12],
         [213, 230, 12],
         [231, 248, 12],
         [249, 266, 13],
         [267, 284, 13],
         [285, 302, 13],
         [303, 320, 14]]);

    this.crs = Array.concat([[1, 0], [2, 1 / 8], [3, 1 / 4], [4, 1 / 2]],
                           Array.apply(null Array(30)))
    return this
}

(def crs
  (into {}
        (concat [[1 0]
                 [2 (/ 1 8)]
                 [3 (/ 1 4)]
                 [4 (/ 1 2)]]
                (map vector (iterate inc 5) (range 1 30)))))
